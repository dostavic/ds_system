# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import p2p_pb2 as p2p__pb2


class NodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectToNode = channel.unary_unary(
                '/Node/ConnectToNode',
                request_serializer=p2p__pb2.NodeInfo.SerializeToString,
                response_deserializer=p2p__pb2.ConnectionResponse.FromString,
                )
        self.GetConnectedNodes = channel.unary_unary(
                '/Node/GetConnectedNodes',
                request_serializer=p2p__pb2.Empty.SerializeToString,
                response_deserializer=p2p__pb2.NodeList.FromString,
                )
        self.BroadcastHeartbeat = channel.unary_unary(
                '/Node/BroadcastHeartbeat',
                request_serializer=p2p__pb2.HeartbeatMessage.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.HandleNodeRemoval = channel.unary_unary(
                '/Node/HandleNodeRemoval',
                request_serializer=p2p__pb2.NodeInfo.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.BroadcastTransaction = channel.unary_unary(
                '/Node/BroadcastTransaction',
                request_serializer=p2p__pb2.Transaction.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.ReceiveTransactions = channel.unary_unary(
                '/Node/ReceiveTransactions',
                request_serializer=p2p__pb2.Transaction.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.GetTransactions = channel.unary_unary(
                '/Node/GetTransactions',
                request_serializer=p2p__pb2.Empty.SerializeToString,
                response_deserializer=p2p__pb2.TransactionsList.FromString,
                )
        self.ReceivePrePrepare = channel.unary_unary(
                '/Node/ReceivePrePrepare',
                request_serializer=p2p__pb2.Block.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.ReceivePrepare = channel.unary_unary(
                '/Node/ReceivePrepare',
                request_serializer=p2p__pb2.Empty.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.ReceiveCommitted = channel.unary_unary(
                '/Node/ReceiveCommitted',
                request_serializer=p2p__pb2.Empty.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.ReceiveInserted = channel.unary_unary(
                '/Node/ReceiveInserted',
                request_serializer=p2p__pb2.Empty.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.GetBlockchain = channel.unary_unary(
                '/Node/GetBlockchain',
                request_serializer=p2p__pb2.Empty.SerializeToString,
                response_deserializer=p2p__pb2.BlockchainList.FromString,
                )
        self.ReceiveTransactionsConnect = channel.unary_unary(
                '/Node/ReceiveTransactionsConnect',
                request_serializer=p2p__pb2.TransactionsList.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.BroadcastTransactionsConnect = channel.unary_unary(
                '/Node/BroadcastTransactionsConnect',
                request_serializer=p2p__pb2.NodeInfo.SerializeToString,
                response_deserializer=p2p__pb2.TransactionsList.FromString,
                )
        self.ReceiveBlockchainConnect = channel.unary_unary(
                '/Node/ReceiveBlockchainConnect',
                request_serializer=p2p__pb2.BlockchainList.SerializeToString,
                response_deserializer=p2p__pb2.Empty.FromString,
                )
        self.BroadcastBlockchainConnect = channel.unary_unary(
                '/Node/BroadcastBlockchainConnect',
                request_serializer=p2p__pb2.NodeInfo.SerializeToString,
                response_deserializer=p2p__pb2.BlockchainList.FromString,
                )


class NodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConnectToNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectedNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandleNodeRemoval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceivePrePrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceivePrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveCommitted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveInserted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockchain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveTransactionsConnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastTransactionsConnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveBlockchainConnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastBlockchainConnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectToNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectToNode,
                    request_deserializer=p2p__pb2.NodeInfo.FromString,
                    response_serializer=p2p__pb2.ConnectionResponse.SerializeToString,
            ),
            'GetConnectedNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectedNodes,
                    request_deserializer=p2p__pb2.Empty.FromString,
                    response_serializer=p2p__pb2.NodeList.SerializeToString,
            ),
            'BroadcastHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastHeartbeat,
                    request_deserializer=p2p__pb2.HeartbeatMessage.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'HandleNodeRemoval': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleNodeRemoval,
                    request_deserializer=p2p__pb2.NodeInfo.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'BroadcastTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastTransaction,
                    request_deserializer=p2p__pb2.Transaction.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'ReceiveTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveTransactions,
                    request_deserializer=p2p__pb2.Transaction.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'GetTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactions,
                    request_deserializer=p2p__pb2.Empty.FromString,
                    response_serializer=p2p__pb2.TransactionsList.SerializeToString,
            ),
            'ReceivePrePrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceivePrePrepare,
                    request_deserializer=p2p__pb2.Block.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'ReceivePrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceivePrepare,
                    request_deserializer=p2p__pb2.Empty.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'ReceiveCommitted': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveCommitted,
                    request_deserializer=p2p__pb2.Empty.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'ReceiveInserted': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveInserted,
                    request_deserializer=p2p__pb2.Empty.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'GetBlockchain': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockchain,
                    request_deserializer=p2p__pb2.Empty.FromString,
                    response_serializer=p2p__pb2.BlockchainList.SerializeToString,
            ),
            'ReceiveTransactionsConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveTransactionsConnect,
                    request_deserializer=p2p__pb2.TransactionsList.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'BroadcastTransactionsConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastTransactionsConnect,
                    request_deserializer=p2p__pb2.NodeInfo.FromString,
                    response_serializer=p2p__pb2.TransactionsList.SerializeToString,
            ),
            'ReceiveBlockchainConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveBlockchainConnect,
                    request_deserializer=p2p__pb2.BlockchainList.FromString,
                    response_serializer=p2p__pb2.Empty.SerializeToString,
            ),
            'BroadcastBlockchainConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastBlockchainConnect,
                    request_deserializer=p2p__pb2.NodeInfo.FromString,
                    response_serializer=p2p__pb2.BlockchainList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Node', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Node(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConnectToNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ConnectToNode',
            p2p__pb2.NodeInfo.SerializeToString,
            p2p__pb2.ConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnectedNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/GetConnectedNodes',
            p2p__pb2.Empty.SerializeToString,
            p2p__pb2.NodeList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/BroadcastHeartbeat',
            p2p__pb2.HeartbeatMessage.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandleNodeRemoval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/HandleNodeRemoval',
            p2p__pb2.NodeInfo.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/BroadcastTransaction',
            p2p__pb2.Transaction.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ReceiveTransactions',
            p2p__pb2.Transaction.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/GetTransactions',
            p2p__pb2.Empty.SerializeToString,
            p2p__pb2.TransactionsList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceivePrePrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ReceivePrePrepare',
            p2p__pb2.Block.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceivePrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ReceivePrepare',
            p2p__pb2.Empty.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveCommitted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ReceiveCommitted',
            p2p__pb2.Empty.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveInserted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ReceiveInserted',
            p2p__pb2.Empty.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockchain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/GetBlockchain',
            p2p__pb2.Empty.SerializeToString,
            p2p__pb2.BlockchainList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveTransactionsConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ReceiveTransactionsConnect',
            p2p__pb2.TransactionsList.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastTransactionsConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/BroadcastTransactionsConnect',
            p2p__pb2.NodeInfo.SerializeToString,
            p2p__pb2.TransactionsList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveBlockchainConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/ReceiveBlockchainConnect',
            p2p__pb2.BlockchainList.SerializeToString,
            p2p__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BroadcastBlockchainConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/BroadcastBlockchainConnect',
            p2p__pb2.NodeInfo.SerializeToString,
            p2p__pb2.BlockchainList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
